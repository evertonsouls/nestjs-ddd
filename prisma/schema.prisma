// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)

  Question Question[]
  Answer   Answer[]
  Comment  Comment[]

  @@map("users")
}

model Question {
  id           String    @id @default(uuid())
  title        String
  slug         String    @unique
  content      String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  authorId     String    @map("author_id")
  bestAnswerId String?   @unique @map("best_answer_id")

  author     User         @relation(fields: [authorId], references: [id])
  bestAnswer Answer?      @relation("bestAnswer", fields: [bestAnswerId], references: [id])
  answers    Answer[]
  Comment    Comment[]
  Attachment Attachment[]

  @@map("questions")
}

model Answer {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  bestAnswerOn Question? @relation("bestAnswer")

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  Question   Question? @relation(fields: [questionId], references: [id])
  questionId String    @map("question_id")

  Comment    Comment[]
  Attachment Attachment[]

  @@map("answers")
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?   @map("question_id")

  answer   Answer? @relation(fields: [answerId], references: [id])
  answerId String? @map("answer_id")

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  @@map("comments")
}

model Attachment {
  id    String @id @default(uuid())
  title String
  url   String

  questionId String?   @map("question_id")
  question   Question? @relation(fields: [questionId], references: [id])

  answer   Answer? @relation(fields: [answerId], references: [id])
  answerId String? @map("answer_id")

  @@map("attachments")
}
